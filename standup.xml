<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *﻿  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
﻿  <ModulePrefs title="Send Message">
﻿  ﻿  <Require feature="rpc" />
﻿  ﻿  <Require feature="views" />
﻿  ﻿  <Require feature="locked-domain" />
﻿  </ModulePrefs>
﻿  <Content type="html"><![CDATA[     

<html>
<style type="text/css">
<!--
.button {
  border-radius: 3px;
  -moz-border-radius: 3px;
  background: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#ddd));
  background: -moz-linear-gradient(top, #fff, #ddd);  
  border: 1px solid #bbb;
}
.button:active {
﻿  background: -webkit-gradient(linear, left top, left bottom, from(#aaa), to(#333)); 
﻿  background: -moz-linear-gradient(bottom, #ddd, #aaa); }
#wrap {
    width:800px;
    margin:0 auto;
    background:#EEEEEE;
}   
#main {
    float:left;
    width:300px;
    margin:0 auto;
    background:#FFFFFF;
}
#text {
    float:right;
    width:400px;
    margin-left:20px;
    background:#FFFFFF;
}

-->
</style>

<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>

<div id="wrap">
    <h2>Stopwatch</h2>
    <div id="main">
        <input type='button' class='button' value='Start' onClick='stopwatchStartStop(this)'></input>
        <input type='button' class='button' value='Reset' onClick='stopwatchReset(this)'></input>
    </div>
    <div id='stopwatchCountdown'>00:00:00</div>
</div>

<script>
// Keep track of how many messages were sent
var messageLastSeen = {};
var myMessageCount = 0;
var missedMessages = 0;

/*
      gapi.hangout.data.sendMessage(
          JSON.stringify([myMessageCount,
                          currentColor,
                          lastTileX,
                          lastTileY]));
*/


var stopwatchOn = false;
var stopwatchCountSec = 0;

var stopwatchDiv = document.getElementById('stopwatchCountdown');


function stopwatchStartStop(b) {
  stopwatchOn = !stopwatchOn;
}


function stopwatchReset() {
  stopwatchOn = false;
  stopwatchCountSec = 0;
}


/** Get a message.
 * @param {MessageReceievedEvent} event An event.
 */
function onMessageReceived(event) {
  try {
    var data = JSON.parse(event.message);

    /* parse the message */

  } catch (e) {
    console.log(e);
  }
}

function clockTick() {
  if (stopwatchOn) stopwatchCountSec++;

  //update the display
  var min = Math.floor(stopwatchCountSec / 60)
  var sec = stopwatchCountSec - (min * 60);
  var hr = Math.floor(min / 60);

  var sMin = '' + min;
  var sSec = '' + sec;
  var sHr = '' + hr;

  stopwatchDiv.innerHTML = (sHr.length < 2 ? '0' : '') + sHr + ':' + (sMin.length < 2 ? '0' : '') + sMin + (sSec.length + '0' : '') + sSec;

}

/** Kick off the app. */
function init() {
  // When API is ready...
  gapi.hangout.onApiReady.add(
      function(eventObj) {
        if (eventObj.isApiReady) {
          try {

            window.setInterval(clockTick, 1000);

            gapi.hangout.data.onMessageReceived.add(onMessageReceived);

          } catch (e) {
            console.log('init:ERROR');
            console.log(e);
          }
        }
      });
}


// Wait for gadget to load.                                                       
gadgets.util.registerOnLoadHandler(init);
</script>
</body>
]]>
</Content>
</Module>

